Java 继承中的初始化顺序
1、父类静态成员初始化
2、父类静态代码块执行
3、子类静态成员初始化
4、子类静态代码块执行
5、父类非静态成员初始化
6、父类非静态代码块执行
7、父类构造方法执行
8、子类非静态成员初始化
9、子类非静态代码块执行
10、子类构造器执行

/**
 * BigDecimal 常量
 */
public static final BigDecimal BIG_DECIMAL_ONE_HUNDRED = BigDecimal.valueOf(100L);
public static final BigDecimal BIG_DECIMAL_TWO_HUNDRED = BigDecimal.valueOf(200L);
public static final BigDecimal BIG_DECIMAL_THREE_HUNDRED = BigDecimal.valueOf(300L);
public static final BigDecimal BIG_DECIMAL_FOUR_HUNDRED = BigDecimal.valueOf(400L);
public static final BigDecimal BIG_DECIMAL_FIVE_HUNDRED = BigDecimal.valueOf(500L);
public static final BigDecimal BIG_DECIMAL_SIX_HUNDRED = BigDecimal.valueOf(600L);
public static final BigDecimal BIG_DECIMAL_SEVEN_HUNDRED = BigDecimal.valueOf(700L);
public static final BigDecimal BIG_DECIMAL_EIGHT_HUNDRED = BigDecimal.valueOf(800L);
public static final BigDecimal BIG_DECIMAL_NINE_HUNDRED = BigDecimal.valueOf(900L);
public static final BigDecimal BIG_DECIMAL_ONE_THOUSAND = BigDecimal.valueOf(1000L);
public static final BigDecimal BIG_DECIMAL_TWO_THOUSAND = BigDecimal.valueOf(2000L);
public static final BigDecimal BIG_DECIMAL_THREE_THOUSAND = BigDecimal.valueOf(3000L);
public static final BigDecimal BIG_DECIMAL_FOUR_THOUSAND = BigDecimal.valueOf(4000L);
public static final BigDecimal BIG_DECIMAL_FIVE_THOUSAND = BigDecimal.valueOf(5000L);
public static final BigDecimal BIG_DECIMAL_SIX_THOUSAND = BigDecimal.valueOf(6000L);
public static final BigDecimal BIG_DECIMAL_SEVEN_THOUSAND = BigDecimal.valueOf(7000L);
public static final BigDecimal BIG_DECIMAL_EIGHT_THOUSAND = BigDecimal.valueOf(8000L);
public static final BigDecimal BIG_DECIMAL_NINE_THOUSAND = BigDecimal.valueOf(9000L);
public static final BigDecimal BIG_DECIMAL_TEN_THOUSAND = BigDecimal.valueOf(10000L);
public static final BigDecimal BIG_DECIMAL_MINUS_ONE = BigDecimal.valueOf(-1L);
public static final BigDecimal BIG_DECIMAL_MINUS_TWO = BigDecimal.valueOf(-2L);
public static final BigDecimal BIG_DECIMAL_MINUS_THREE = BigDecimal.valueOf(-3L);
public static final BigDecimal BIG_DECIMAL_MINUS_FOUR = BigDecimal.valueOf(-4L);
public static final BigDecimal BIG_DECIMAL_MINUS_FIVE = BigDecimal.valueOf(-5L);
public static final BigDecimal BIG_DECIMAL_MINUS_SIX = BigDecimal.valueOf(-6L);
public static final BigDecimal BIG_DECIMAL_MINUS_SEVEN = BigDecimal.valueOf(-7L);
public static final BigDecimal BIG_DECIMAL_MINUS_EIGHT = BigDecimal.valueOf(-8L);
public static final BigDecimal BIG_DECIMAL_MINUS_NINE = BigDecimal.valueOf(-9L);
public static final BigDecimal BIG_DECIMAL_MINUS_TEN = BigDecimal.valueOf(-10L);
public static final BigDecimal BIG_DECIMAL_ZERO = BigDecimal.valueOf(0);
public static final BigDecimal BIG_DECIMAL_ONE = BigDecimal.valueOf(1L);
public static final BigDecimal BIG_DECIMAL_TWO = BigDecimal.valueOf(2L);
public static final BigDecimal BIG_DECIMAL_THREE = BigDecimal.valueOf(3L);
public static final BigDecimal BIG_DECIMAL_FOUR = BigDecimal.valueOf(4L);
public static final BigDecimal BIG_DECIMAL_FIVE = BigDecimal.valueOf(5L);
public static final BigDecimal BIG_DECIMAL_SIX = BigDecimal.valueOf(6L);
public static final BigDecimal BIG_DECIMAL_SEVEN = BigDecimal.valueOf(7L);
public static final BigDecimal BIG_DECIMAL_EIGHT = BigDecimal.valueOf(8L);
public static final BigDecimal BIG_DECIMAL_NINE = BigDecimal.valueOf(9L);
public static final BigDecimal BIG_DECIMAL_TEN = BigDecimal.valueOf(10L);
public static final BigDecimal BIG_DECIMAL_TWENTY = BigDecimal.valueOf(20L);
public static final BigDecimal BIG_DECIMAL_THIRTY = BigDecimal.valueOf(30L);
public static final BigDecimal BIG_DECIMAL_FORTY = BigDecimal.valueOf(40L);
public static final BigDecimal BIG_DECIMAL_FIFTY = BigDecimal.valueOf(50L);
public static final BigDecimal BIG_DECIMAL_SIXTY = BigDecimal.valueOf(60L);
public static final BigDecimal BIG_DECIMAL_SEVENTY = BigDecimal.valueOf(70L);
public static final BigDecimal BIG_DECIMAL_EIGHTY = BigDecimal.valueOf(80L);
public static final BigDecimal BIG_DECIMAL_NINETY = BigDecimal.valueOf(90L);
public static final BigDecimal BIG_DECIMAL_E = BigDecimal.valueOf(Math.E);
public static final BigDecimal BIG_DECIMAL_PI = BigDecimal.valueOf(Math.PI);

/**
 * BigInteger 常量
 */
public static final BigInteger BIG_INTEGER_ONE_HUNDRED = BigInteger.valueOf(100L);
public static final BigInteger BIG_INTEGER_TWO_HUNDRED = BigInteger.valueOf(200L);
public static final BigInteger BIG_INTEGER_THREE_HUNDRED = BigInteger.valueOf(300L);
public static final BigInteger BIG_INTEGER_FOUR_HUNDRED = BigInteger.valueOf(400L);
public static final BigInteger BIG_INTEGER_FIVE_HUNDRED = BigInteger.valueOf(500L);
public static final BigInteger BIG_INTEGER_SIX_HUNDRED = BigInteger.valueOf(600L);
public static final BigInteger BIG_INTEGER_SEVEN_HUNDRED = BigInteger.valueOf(700L);
public static final BigInteger BIG_INTEGER_EIGHT_HUNDRED = BigInteger.valueOf(800L);
public static final BigInteger BIG_INTEGER_NINE_HUNDRED = BigInteger.valueOf(900L);
public static final BigInteger BIG_INTEGER_ONE_THOUSAND = BigInteger.valueOf(1000L);
public static final BigInteger BIG_INTEGER_TWO_THOUSAND = BigInteger.valueOf(2000L);
public static final BigInteger BIG_INTEGER_THREE_THOUSAND = BigInteger.valueOf(3000L);
public static final BigInteger BIG_INTEGER_FOUR_THOUSAND = BigInteger.valueOf(4000L);
public static final BigInteger BIG_INTEGER_FIVE_THOUSAND = BigInteger.valueOf(5000L);
public static final BigInteger BIG_INTEGER_SIX_THOUSAND = BigInteger.valueOf(6000L);
public static final BigInteger BIG_INTEGER_SEVEN_THOUSAND = BigInteger.valueOf(7000L);
public static final BigInteger BIG_INTEGER_EIGHT_THOUSAND = BigInteger.valueOf(8000L);
public static final BigInteger BIG_INTEGER_NINE_THOUSAND = BigInteger.valueOf(9000L);
public static final BigInteger BIG_INTEGER_TEN_THOUSAND = BigInteger.valueOf(10000L);
public static final BigInteger BIG_INTEGER_MINUS_ONE = BigInteger.valueOf(-1L);
public static final BigInteger BIG_INTEGER_MINUS_TWO = BigInteger.valueOf(-2L);
public static final BigInteger BIG_INTEGER_MINUS_THREE = BigInteger.valueOf(-3L);
public static final BigInteger BIG_INTEGER_MINUS_FOUR = BigInteger.valueOf(-4L);
public static final BigInteger BIG_INTEGER_MINUS_FIVE = BigInteger.valueOf(-5L);
public static final BigInteger BIG_INTEGER_MINUS_SIX = BigInteger.valueOf(-6L);
public static final BigInteger BIG_INTEGER_MINUS_SEVEN = BigInteger.valueOf(-7L);
public static final BigInteger BIG_INTEGER_MINUS_EIGHT = BigInteger.valueOf(-8L);
public static final BigInteger BIG_INTEGER_MINUS_NINE = BigInteger.valueOf(-9L);
public static final BigInteger BIG_INTEGER_MINUS_TEN = BigInteger.valueOf(-10L);
public static final BigInteger BIG_INTEGER_ZERO = BigInteger.valueOf(0);
public static final BigInteger BIG_INTEGER_ONE = BigInteger.valueOf(1L);
public static final BigInteger BIG_INTEGER_TWO = BigInteger.valueOf(2L);
public static final BigInteger BIG_INTEGER_THREE = BigInteger.valueOf(3L);
public static final BigInteger BIG_INTEGER_FOUR = BigInteger.valueOf(4L);
public static final BigInteger BIG_INTEGER_FIVE = BigInteger.valueOf(5L);
public static final BigInteger BIG_INTEGER_SIX = BigInteger.valueOf(6L);
public static final BigInteger BIG_INTEGER_SEVEN = BigInteger.valueOf(7L);
public static final BigInteger BIG_INTEGER_EIGHT = BigInteger.valueOf(8L);
public static final BigInteger BIG_INTEGER_NINE = BigInteger.valueOf(9L);
public static final BigInteger BIG_INTEGER_TEN = BigInteger.valueOf(10L);
public static final BigInteger BIG_INTEGER_TWENTY = BigInteger.valueOf(20L);
public static final BigInteger BIG_INTEGER_THIRTY = BigInteger.valueOf(30L);
public static final BigInteger BIG_INTEGER_FORTY = BigInteger.valueOf(40L);
public static final BigInteger BIG_INTEGER_FIFTY = BigInteger.valueOf(50L);
public static final BigInteger BIG_INTEGER_SIXTY = BigInteger.valueOf(60L);
public static final BigInteger BIG_INTEGER_SEVENTY = BigInteger.valueOf(70L);
public static final BigInteger BIG_INTEGER_EIGHTY = BigInteger.valueOf(80L);
public static final BigInteger BIG_INTEGER_NINETY = BigInteger.valueOf(90L);

if (nums[0] <= 0 && nums[length - 1] >= 0) { // 优化1: 整个数组同符号，则无解
        for (let i = 0; i < length - 2;) {
          if (nums[i] > 0) break; // 优化2: 最左值为正数则一定无解
          let first = i + 1
          let last = length - 1
          do {
            if (first >= last || nums[i] * nums[last] > 0) break // 两人选相遇，或者三人同符号，则退出
            let result = nums[i] + nums[first] + nums[last]
            if (result === 0) { // 如果可以组队
              res.push([nums[i], nums[first], nums[last]])
            }
            if (result <= 0 ) { // 实力太弱，把菜鸟那边右移一位
              while (first < last && nums[first] === nums[++first]){} // 如果相等就跳过
            } else { // 实力太强，把大神那边右移一位
              while (first < last && nums[last] === nums[--last]) {}
            }
          } while (first < last)
          while (nums[i] === nums[++i]) {}
        }
      }
      return res

120.42194444444445, 36.13611111111111

{
    "status": "success",
    "message": null,
    "data": {
        "scope": null,
        "accessToken": null,
        "tokenType": null,
        "expiresIn": null,
        "tokenId": "MTAuMTM1LjEyMi42Mw==|NTZkMmNiY2U5MjBlODViZGMyMjEzZDM0OTdlYWVhYTU3YjgwOTUwOTAxMDliNDBhYWIwZTVmY2QyMmEzYTdhMA==|vKKBPcKJ5oKmzEgkQDw7Ib7kk14=",
        "uucUserInfoTO": {
            "userId": 3,
            "uucUserId": "20190923190223397-DE37-F061B4222",
            "displayName": "刘艳东",
            "loginName": "19037726",
            "mobile": "19862208388",
            "mail": "liuyandong.cosmo@haier.com"
        },
        "error": null,
        "errorDesc": null
    }
}

aa = {
    "1": {
        "id": 337,
        "grabType": 1,
        "demand": 2121
    },
    "2": {
        "id": 337,
        "grabType": 1,
        "demand": 2121
    }
}

deletedIds = {1: 0, 2: 3, };


if (aa[index + ""]) {
    deletedIds.var
}

https://blog.csdn.net/caiyqn/article/details/106262563

cat << EOF >> /etc/yum.repos.d/openstack.repo
[openstack-rocky]
name=openstack-rocky
baseurl=https://mirrors.aliyun.com/centos/7/cloud/x86_64/openstack-rocky/
enabled=1
gpgcheck=0

[qume-kvm]
name=qemu-kvm
baseurl= https://mirrors.aliyun.com/centos/7/virt/x86_64/kvm-common/
enabled=1
gpgcheck=0
EOF

yum -y install openstack-swift-proxy  openstack-swift-account openstack-swift-container openstack-swift-object

<dependency>
    <groupId>com.xuxueli</groupId>
    <artifactId>xxl-job-core</artifactId>
    <version>2.1.2</version>
</dependency>

./redis-trib.rb create --replicas 1 127.0.0.1:6380 127.0.0.1:6381 127.0.0.1:6382 127.0.0.1:6383 127.0.0.1:6384 127.0.0.1:6385

/usr/local/redis/redis-5.0.0/src/redis-server /usr/local/redis/redis-5.0.0/redis-cluster-conf/7001/redis.conf
/usr/local/redis/redis-5.0.0/src/redis-server /usr/local/redis/redis-5.0.0/redis-cluster-conf/7002/redis.conf
/usr/local/redis/redis-5.0.0/src/redis-server /usr/local/redis/redis-5.0.0/redis-cluster-conf/7003/redis.conf
/usr/local/redis/redis-5.0.0/src/redis-server /usr/local/redis/redis-5.0.0/redis-cluster-conf/7004/redis.conf
/usr/local/redis/redis-5.0.0/src/redis-server /usr/local/redis/redis-5.0.0/redis-cluster-conf/7005/redis.conf
/usr/local/redis/redis-5.0.0/src/redis-server /usr/local/redis/redis-5.0.0/redis-cluster-conf/7006/redis.conf

/usr/local/redis/redis-5.0.0/src/redis-cli --cluster create 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 127.0.0.1:7006 --cluster-replicas 1