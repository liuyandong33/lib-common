group "build.dream"
version "0.1.0"

buildscript {
    ext {
        springBootVersion = "2.0.0.RELEASE"
        springCloudVersion = "Finchley.RELEASE"
        projectName = "lib-common"
    }
    repositories {
        mavenLocal()
        maven { url "${mavenPublicRepositoryUrl}" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: "java"
//apply plugin: "scala"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: "idea"
apply plugin: "maven-publish"

repositories {
    mavenLocal()
    maven { url "${mavenPublicRepositoryUrl}" }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, "seconds"
}

dependencies {
//    compile("org.scala-lang:scala-library:2.12.5")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-mail")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.security.oauth:spring-security-oauth2:2.3.2.RELEASE")
    compile("org.springframework.boot:spring-boot-starter-data-redis")
    compile("org.springframework.boot:spring-boot-starter-jdbc")
    compile("org.springframework.boot:spring-boot-starter-data-mongodb")
    compile("org.apache.tomcat.embed:tomcat-embed-jasper")
    compile("com.google.code.gson:gson:2.8.0")
    compile("com.google.zxing:javase:3.3.3")
    compile("commons-codec:commons-codec:1.10")
    compile("org.apache.commons:commons-compress:1.18")
    compile("dom4j:dom4j:1.6.1")
    compile("redis.clients:jedis:2.9.0")
    compile("net.sf.json-lib:json-lib:2.4:jdk15")
    compile("com.networknt:json-schema-validator:0.1.13")
    compile("com.belerweb:pinyin4j:2.5.1")
    compile("org.springframework.kafka:spring-kafka:2.1.5.RELEASE")
    compile("com.alibaba:fastjson:1.2.49")
    compile("org.springframework.boot:spring-boot-starter-amqp")
    compile("org.springframework.boot:spring-boot-starter-activemq")
    compile("com.jcraft:jsch:0.1.54")
    compile("org.quartz-scheduler:quartz:2.3.0")
    compile("org.jsoup:jsoup:1.11.2")
    compile("org.elasticsearch.client:elasticsearch-rest-high-level-client:7.1.0")
    compile("org.elasticsearch:elasticsearch:7.1.0")
    compile("org.apache.commons:commons-math3:3.6.1")
    compile("org.aspectj:aspectjweaver:1.9.2")
    compile("commons-io:commons-io:2.6")
    compile("org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.0")
    compile("mysql:mysql-connector-java:6.0.6")
    compile("org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.1.0")
}

task makeJar(type: Jar) {
    baseName "${projectName}"
    from("build/classes/java/main", "build/classes/scala/main", "build/resources/main")
    exclude("build/dream/common/Application.class", "application.properties", "logback.xml", "development.properties")
}

task sourceJar(type: Jar) {
    classifier = "sources"
    from sourceSets.main.allSource
    exclude("build/dream/common/Application.java", "application.properties", "logback.xml", "development.properties")
}

makeJar.dependsOn(classes)

publishing {
    repositories {
        if (project.hasProperty("release")) {
            maven {
                url "${mavenReleasesRepositoryUrl}"
                credentials {
                    username = "${nexusUserName}"
                    password = "${nexusPassword}"
                }
            }
        } else {
            maven {
                url "${mavenSnapshotsRepositoryUrl}"
                credentials {
                    username = "${nexusUserName}"
                    password = "${nexusPassword}"
                }
            }
        }
    }
    publications {
        maven(MavenPublication) {
            artifacts = [makeJar, sourceJar]

            groupId group
            if (!project.hasProperty("release")) {
                version version + "-SNAPSHOT"
            } else {
                version version
            }
            artifactId projectName
        }
    }
}

/*
sourceSets {
    main {
        scala {
            srcDirs = ["src/main/java", "src/main/scala"]
        }
        java {
            srcDirs = []
        }
    }

    test {
        scala {
            srcDirs = ["src/test/java", "src/test/scala"]
        }
        java {
            srcDirs = []
        }
    }
}*/
